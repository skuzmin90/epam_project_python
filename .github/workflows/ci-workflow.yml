name: Build Application

on:
#  workflow_dispatch:
  push:
    branches:
      - main
      - test
  pull_request:
    branches:
      - main
      - test

jobs:
#  sonarcloud:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      - name: SonarCloud Scan
#        uses: sonarsource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#  test:
#    needs: [sonarcloud]
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/checkout@v2
#      - name: Create Docker-compose environment
#        run: docker-compose --env-file ./test.env up -d
#
#      - name: Test our Docker-compose environment
#        run: docker exec flask-webapp pytest

  build:
    needs: [sonarcloud]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Set sha_short
        id: sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: github_actions
          IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}-${{ steps.sha.outputs.sha_short }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Logout of amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Deploy app to prod EKS
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks
          cat app.yaml | envsubst | kubectl apply -f - -n prod
          sleep 20
          kubectl get services -n prod
        if: ${{ steps.extract_branch.outputs.branch }}=="main"

      - name: Deploy app to test EKS
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks
          cat app.yaml | envsubst | kubectl apply -f - -n test
          sleep 20
          kubectl get services -n test
          echo http://$(kubectl get -n prod -o jsonpath="{.status.loadBalancer.ingress[0].hostname}" services webapp-external-service)
        if: ${{ steps.extract_branch.outputs.branch }}=="test"

#  docker_build:
#    needs: [test]
#    runs-on: ubuntu-latest
#    steps:
#    - name: Check Out Repo
#      uses: actions/checkout@v2
#
#    - name: Login to Docker Hub
#      uses: docker/login-action@v1
#      with:
#        username: ${{ secrets.DOCKERHUB_USERNAME }}
#        password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#    - name: Extract branch name
#      shell: bash
#      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
#      id: extract_branch
#
#    - name: Set up Docker Buildx
#      id: buildx
#      uses: docker/setup-buildx-action@v1
#
#    - name: Build and push
#      id: docker_build
#      uses: docker/build-push-action@v2
#      with:
#        context: .
#        file: ./Dockerfile
#        push: true
#        tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask-webapp:${{ steps.extract_branch.outputs.branch }}-latest
#
#    - name: Image digest
#      run: echo ${{ steps.docker_build.outputs.digest }}