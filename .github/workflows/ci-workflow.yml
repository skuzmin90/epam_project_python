name: Build and Deliver Application

on:
#  workflow_dispatch:
  push:
    branches:
      - main
      - test

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  test:
    needs: [sonarcloud]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Create Docker-compose environment
        run: docker-compose --env-file ./test.env up -d

      - name: Test our Docker-compose environment
        run: docker exec flask-webapp pytest

  build:
    needs: [test]
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      REGION: eu-central-1
      DEPLOYMENT_NAME: webapp

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Set sha_short
        id: sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: github_actions
          IMAGE_TAG: ${{ steps.sha.outputs.sha_short }}-${{ steps.extract_branch.outputs.branch }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy app to prod EKS
        if: github.ref == 'refs/heads/main'
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          NAMESPACE: ${{ steps.extract_branch.outputs.branch }}
        run: |
          aws eks --region $REGION update-kubeconfig --name eks
          cat app.yaml | envsubst | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE
          kubectl get -n $NAMESPACE services webapp-external-service

      - name: Deploy app to test EKS
        if: github.ref == 'refs/heads/test'
        env:
          DB_NAME: ${{ secrets.TEST_DB_NAME }}
          NAMESPACE: ${{ steps.extract_branch.outputs.branch }}
        run: |
          cat create_db.sh | envsubst | sh create_db.sh
          aws eks --region $REGION update-kubeconfig --name eks
          cat app.yaml | envsubst | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE
          kubectl get -n $NAMESPACE services webapp-external-service