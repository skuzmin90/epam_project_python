name: Build Application

on:
#  workflow_dispatch:
  push:
    branches:
      - main
      - test
  pull_request:
    branches:
      - main
      - test

jobs:
  sonarqube:
    name: Sonarqube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install sonarqube
        run: |
          docker run -d --name sonarqube \
          -v /sonarqube/sonarqube_data:/opt/sonarqube/data \
          -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest
          curl -O https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip -qq sonar-scanner-cli-4.6.2.2472-linux.zip
          PATH=$PATH:/home/runner/work/forecast-app/forecast-app/sonar-scanner-4.6.2.2472-linux/bin
          sonar-scanner -v

#      - name: Run sonar-scanner
#        run: |
#          curl -O https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
#          unzip -qq sonar-scanner-cli-4.6.2.2472-linux.zip
#          pwd
#          PATH=$PATH:/home/runner/work/forecast-app/forecast-app/sonar-scanner-cli-4.6.2.2472-linux/bin
#          echo $PATH
#          cd ./sonar-scanner-cli-4.6.2.2472-linux/bin && ls -la
#          cd sonar-scanner-cli-4.6.2.2472-linux/bin && ls -la
#          sonar-scanner-cli-4.6.2.2472-linux/bin/sonar-scanner \
#          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
#          -Dsonar.sources=. \
#          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
#          -Dsonar.projectKey=forecast-app

#      - uses: sonarsource/sonarqube-scan-action@master
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#      - uses: sonarsource/sonarqube-quality-gate-action@master
#        timeout-minutes: 5
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  test:
    needs: [sonarqube]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Docker-compose environment
        run: docker-compose --env-file ./test.env up -d

      - name: Test our Docker-compose environment
        run: docker exec flask-webapp pytest

  docker_build:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - name: Check Out Repo 
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask-webapp:${{ steps.extract_branch.outputs.branch }}-latest

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}


